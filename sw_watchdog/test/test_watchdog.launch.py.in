# Copyright (c) 2021 Robert Bosch GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import os

import unittest

import ament_index_python
import launch
import launch_ros
import launch_testing
import launch_testing.actions
import launch_testing.asserts
import launch_testing.util
import launch_testing_ros

from launch import LaunchDescription
from launch.actions import ExecuteProcess
from launch.actions import LogInfo
from launch.actions import RegisterEventHandler
from launch.actions import Shutdown
from launch.events import matches_action
from launch.events.process import ShutdownProcess
from launch_ros.actions import ComposableNodeContainer
from launch_ros.actions import LifecycleNode
from launch_ros.descriptions import ComposableNode
from launch_ros.event_handlers import OnStateTransition

import lifecycle_msgs.msg


def generate_test_description():
    os.environ['OSPL_VERBOSITY'] = '8'
    os.environ['RCUTILS_CONSOLE_OUTPUT_FORMAT'] = '{message}'

    container = ComposableNodeContainer(
            name='my_container',
            namespace='my_namespace',
            package='rclcpp_components',
            executable='component_container',
            composable_node_descriptions=[
                ComposableNode(
                    package='demo_nodes_cpp',
                    plugin='demo_nodes_cpp::Talker',
                    name='talker'),
                ComposableNode(
                    package='sw_watchdog',
                    plugin='sw_watchdog::SimpleHeartbeat',
                    name='heartbeat',
                    parameters=[{'period': 200}],
                    extra_arguments=[{'use_intra_process_comms': True}]),
            ],
            output='screen')

    watchdog_node = LifecycleNode(
        package='sw_watchdog',
        executable='simple_watchdog',
        namespace='',
        name='simple_watchdog',
        output='screen',
        arguments=['220', '--publish', '--activate'])

    watchdog_inactive_handler = RegisterEventHandler(
        OnStateTransition(
            target_lifecycle_node=watchdog_node,
            goal_state='inactive',
            entities=[LogInfo(msg='Watchdog transitioned to `INACTIVE` state.')],
        )
    )

    shutdown_heartbeat_when_watchdog_active = ExecuteProcess(
        cmd=[
            "@PYTHON_EXECUTABLE@",
            "@SHUTDOWN_SCRIPT@"
            ],
        name='shutdown_heartbeat_when_watchdog_active',
        emulate_tty=True)

    launch_description = LaunchDescription()
    launch_description.add_action(container)
    launch_description.add_action(watchdog_node)
    launch_description.add_action(watchdog_inactive_handler)
    launch_description.add_action(shutdown_heartbeat_when_watchdog_active)
    launch_description.add_action(launch_testing.util.KeepAliveProc())
    launch_description.add_action(launch_testing.actions.ReadyToTest())

    return launch_description, locals()

class TestModeManagement(unittest.TestCase):

    def test_processes_output(self, proc_output, watchdog_node):
        """Check manager and nodes logging output for expected strings."""

        from launch_testing.tools.output import get_default_filtered_prefixes
        output_filter = launch_testing_ros.tools.basic_output_filter(
            filtered_prefixes=get_default_filtered_prefixes() + ['service not available, waiting...'],
            filtered_rmw_implementation='@rmw_implementation@'
        )
        proc_output.assertWaitFor(
            expected_output=launch_testing.tools.expected_output_from_file(path='@EXPECTED_OUTPUT@'),
            process=watchdog_node,
            output_filter=output_filter,
            timeout=15
        )

        import time
        time.sleep(1)

@launch_testing.post_shutdown_test()
class TestModeManagementShutdown(unittest.TestCase):

    def test_last_process_exit_code(self, proc_info, watchdog_node):
        launch_testing.asserts.assertExitCodes(proc_info, process=watchdog_node)
